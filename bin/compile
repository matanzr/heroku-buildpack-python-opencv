#!/usr/bin/env bash

set -eo pipefail

export PATH=:/usr/local/bin:$PATH

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

CACHED_DIRS=".heroku"

# Where to store the Pip download cache.

PIP_DOWNLOAD_CACHE=${PIP_DOWNLOAD_CACHE:-$CACHE_DIR/pip_downloads}

VIRTUALENV_LOC=".heroku/venv"
LEGACY_TRIGGER="lib/python2.7"
PROFILE_PATH="$BUILD_DIR/.profile.d/python.sh"

DEFAULT_PYTHON_VERSION="python-2.7.3"
PYTHON_EXE="/app/.heroku/python/bin/python"

# Sanitizing environment variables.
unset GIT_DIR PYTHONHOME PYTHONPATH LD_LIBRARY_PATH LIBRARY_PATH

# We'll need to send these statics to other scripts we `source`.
export PIP_DOWNLOAD_CACHE BUILD_DIR CACHE_DIR BIN_DIR PROFILE_PATH

source $BIN_DIR/utils

APP_DIR='/app'
TMP_APP_DIR=$CACHE_DIR/tmp_app_dir

mkdir -p $TMP_APP_DIR
deep-mv $APP_DIR $TMP_APP_DIR
deep-mv $BUILD_DIR $APP_DIR

ORIG_BUILD_DIR=$BUILD_DIR
BUILD_DIR=$APP_DIR

export PATH=$BUILD_DIR/.heroku/python/bin:$PATH
export PYTHONUNBUFFERED=1
export LANG=en_US.UTF-8
export LIBRARY_PATH=/app/.heroku/vendor/lib
export LD_LIBRARY_PATH=/app/.heroku/vendor/lib

# Switch to the repo's context.
cd $BUILD_DIR

# Experimental pre_compile hook.
source $BIN_DIR/steps/hooks/pre_compile

# ### Sanity Checks
#
# Just a little peace of mind.

# If no requirements given, assume `setup.py develop`.
if [ ! -f requirements.txt ]; then
  puts-step "No requirements.txt provided; assuming dist package."
  echo "-e ." > requirements.txt
fi

# If no runtime given, assume default version.
if [ ! -f runtime.txt ]; then
  puts-step "No runtime.txt provided; assuming $DEFAULT_PYTHON_VERSION."
  echo $DEFAULT_PYTHON_VERSION > runtime.txt
fi

# ### The Cache
mkdir -p $CACHE_DIR

#[ ! "$(ls -A $CACHE_DIR)" ] && export FRESH_APP=1


# Restore old artifacts from the cache.
for dir in $CACHED_DIRS; do
  cp -R $CACHE_DIR/$dir . &> /dev/null || true
done

set +e
# Create set-aside `.heroku` folder.
mkdir .heroku &> /dev/null
HEROKU_DIR_STATUS=$?
set -e

# Buildpack profile init script
mkdir -p $(dirname $PROFILE_PATH)

set +e
PYTHON_VERSION="python-2.7.3"

# Install Python.
if [ -f .heroku/python-version ]; then
  if [ ! $(cat .heroku/python-version) = $PYTHON_VERSION ]; then
    puts-step "Found $(cat .heroku/python-version), removing."
    rm -fr .heroku/python
  else
    SKIP_INSTALL=1
  fi
fi

if [ ! "$SKIP_INSTALL" ]; then
  puts-step "Preparing Python runtime ($PYTHON_VERSION)"
  curl http://envy-versions.s3.amazonaws.com/$PYTHON_VERSION.tar.bz2 -s | tar jx &> /dev/null
  if [[ $? != 0 ]] ; then
    puts-warn "Requested runtime ($PYTHON_VERSION) was not found."
    puts-warn "Aborting.  More info: https://devcenter.heroku.com/articles/python-support"
    exit 1
  fi
  mv python .heroku/python

  # Record for future reference.
  echo $PYTHON_VERSION > .heroku/python-version
  WORKING_DIR=$(pwd)
else
  puts-step "Using Python runtime ($PYTHON_VERSION)"
fi

set +e

puts-step "Creating Virtualenv version $(virtualenv --version)"

OUT=$(virtualenv --distribute --never-download -p $PYTHON_EXE --prompt=venv . 2>&1)
echo "$OUT" | indent

set -e

# Pylibmc support.
# See [`bin/steps/pylibmc`](pylibmc.html).
source $BIN_DIR/steps/pylibmc

# Activate the Virtualenv.
puts-step "Activating virtualenv"
source $VIRTUALENV_LOC/bin/activate

# Install Mercurial if it appears to be required.
if (grep -Fiq "hg+" requirements.txt) then
  pip install --use-mirrors mercurial | indent
fi

# Install ez_setup
#puts-step "Installing ez_setup using pip version $(pip --version | awk '{print $2}')"
#pip install --use-mirrors -r requirements.txt --exists-action=w --src=./.heroku/src | cleanup | indent

# Install dependencies with Pip.
puts-step "Installing dependencies using pip version $(pip --version | awk '{print $2}')"
pip install --use-mirrors -r requirements.txt --exists-action=w --src=./.heroku/src | indent


# Make Virtualenv's paths relative for portability.
set +e
OUT=$(virtualenv --python $PYTHON_EXE  --relocatable $VIRTUALENV_LOC)
[ $? -ne 0 ] && {
  puts-warn "Error making virtualenv relocatable"
  echo "$OUT" | indent
  exit 1
}
set -e

# ### Finalize
#

# Store new artifacts in cache.
for dir in $CACHED_DIRS; do
  rm -rf $CACHE_DIR/$dir
  cp -R $dir $CACHE_DIR/
done

# Set context environment variables.

set-env PATH '$HOME/.heroku/venv/bin:$HOME/.heroku/python/bin:$PATH'
set-env PYTHONUNBUFFERED true
set-default-env LIBRARY_PATH /app/.heroku/vendor/lib
set-default-env LD_LIBRARY_PATH /app/.heroku/vendor/lib

set-default-env LANG en_US.UTF-8
set-default-env PYTHONHASHSEED random
set-default-env PYTHONHOME /app/.heroku/python
set-default-env PYTHONPATH /app/

#install OpenCV

set -e

indent() {
  sed -u 's/^/       /'
}

build=$BUILD_DIR
cache=$CACHE_DIR

#ensure it exists
mkdir -p ${cache}

cmake_version="2.8.6"
cmake_url="http://www.cmake.org/files/v2.8/cmake-2.8.6.tar.gz"
cmake_file="cmake-${cmake_version}.tar.gz"
cmake_tar_dir="cmake-${cmake_version}"

opencv_version="2.4.5"
opencv_dir="opencv-${opencv_version}"
opencv_file="${opencv_dir}.tar.gz"
# https://s3.amazonaws.com/nerdglasses/opencv/OpenCV-2.4.2.tar.bz2
opencv_url="https://s3.amazonaws.com/nerdglasses/opencv/${opencv_dir}.tar.gz"

cache_target=${cache}/${cmake_file}
build_target=${build}/.heroku
target=/app/.heroku

if [ ! -f ${cache_target} ]; then
  echo "No cached compile detected. Bulding..." | indent
  cd $build
  
  echo "Compiling cmake v${cmake_version}..." | indent
  #Compile cmake
  curl -s ${cmake_url} > ${cmake_file}
  tar zxf ${cmake_file}
  cd ${cmake_tar_dir}
  ./bootstrap --prefix=${target} | indent
  make | indent
  make install | indent
  cd ..

  #Create cache slug
  tar czf ${cache_target} -C ${target} .
fi

mkdir -p ${build_target}
tar xzf ${cache_target} -C ${build_target}
PATH=${build_target}/bin:$PATH

cache_target=${cache}/${opencv_file}
build_target=${build}/.heroku
target=/app/.heroku

if [ ! -f ${cache_target} ]; then
  echo "No cached compile detected. Bulding..." | indent
  cd $build

  echo "Compiling OpenCV v${opencv_version}..." | indent
  #Compile OpenCV
  curl -s ${opencv_url} > ${opencv_file}
  tar xf ${opencv_file}
  cd ${opencv_dir}
  mkdir build
  cd build

  cmake -DBUILD_SHARED_LIBS=NO DCMAKE_SHARED_LINKER_FLAGS="-fPIC" -DBUILD_DOCS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DWITH_OPENEXR=OFF -DCMAKE_FIND_ROOT_PATH=${target} -DCMAKE_INSTALL_PREFIX=${target} .. | indent
  make install | indent
  cd ..

  #Create cache slug
  tar czf ${cache_target} -C ${target} .
fi

mkdir -p ${build_target}
tar xzf ${cache_target} -C ${build_target}

# ### Fin.

# Experimental post_compile hook.
source $BIN_DIR/steps/hooks/post_compile